syntax = "proto3";  // 用 proto3 来解读

package person; // 给 proto 分包的 package，和 go 中的 package 不同，整个 proto 中的文件可以用 person. 来使用

// option go_package = "包名;别名" 定义完成后 import 此包的路径会像是 import 别名 报名
option go_package = "github.com/ShowyQuasar88/rpc_demo/go_grpc/pb/person;person";

//import "home/home.proto";   // 引入其他包下的结构体，根路径为执行 protoc 命令所在的路径
import "google/api/annotations.proto";

//message House {
//    repeated Person persons = 1;
//    message V { // 内部也可以嵌套 message
//        string name = 1;
//    }
//    V v = 2;    // 声明了需要使用才会产生，否则是不会生成的
//}

//message Person{
//    string name = 1;
//    int32 age = 2;
//    bool sex = 3;
//    repeated string test = 4;   // repeated 声明切片
//    map<string,string> test_map = 5;    // 声明 map，第一个只能是 string，第二个可以是之前定义过的类型，比如 Person
//
//    enum GENDER {   // 枚举类型必须从 0 开始标序号
//        option allow_alias = true;  // 比如 girl 和 woman 我们都想让他是 1，那么就需要设置这个
//        MAN = 0;
//        WOMAN = 1;
//        GIRL = 1;
//        OTHER = 2;
//    }
//
//    oneof TestOneOf {
//        string one = 7;
//        string two = 8;
//        string three = 9;
//    }
//
//    GENDER gender = 6;
//
//    home.Home i_home = 10;
//}

message PersonReq {
    string name = 1;
    int32 age = 2;
}

message PersonResp {
    string name = 1;
    int32 age = 2;
}

//service SearchService {
//    rpc Search(PersonReq) returns (PersonResp);    // 定义服务传统方式，即刻享用
//    rpc SearchIn(stream PersonReq) returns (PersonResp);    // 入参为流，服务端接受流并返回一个对象
//    rpc SearchOut(PersonReq) returns (stream PersonResp);    // 出参为流，服务端接收对象并返回一个流，客户端接收流
//    rpc SearchIO(stream PersonReq) returns (stream PersonResp);    // 入参出餐都为流，服务端客户端都发送并接收流
//}

service SearchService {
    rpc Search(PersonReq) returns (PersonResp) {
        option(google.api.http)={
            post: "/api/person",
            body: "*"
        };
    };

}
